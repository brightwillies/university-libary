"use client";
import React, { useState, useRef } from 'react';
import Image from 'next/image';
import { Button } from '@/components/ui/button';

interface FileUploadProps {
  type: "image" | "file";
  accept: string;
  placeholder: string;
  folder: string;
  variant: "light" | "dark";
  onFileChange: (fileUrl: string) => void;
}

const FileUpload: React.FC<FileUploadProps> = ({
  type,
  accept,
  placeholder,
  folder,
  variant,
  onFileChange,
}) => {
  const [file, setFile] = useState<File | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const selectedFile = e.target.files[0];
      setFile(selectedFile);

      // Create preview URL for images
      if (type === "image") {
        setPreviewUrl(URL.createObjectURL(selectedFile));
      }

      // Upload the file
      await uploadFile(selectedFile);
    }
  };

  const uploadFile = async (fileToUpload: File) => {
    setIsUploading(true);
    
    try {
      // Create form data
      const formData = new FormData();
      formData.append('file', fileToUpload);
      formData.append('fileName', fileToUpload.name);
      formData.append('folder', folder);

      // Upload to ImageKit
      const response = await fetch('/api/imagekit/upload', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error('Upload failed');
      }

      const data = await response.json();
      onFileChange(data.url); // Pass the uploaded URL back to the form
    } catch (error) {
      console.error('Upload error:', error);
      // Handle error (you might want to add error state)
    } finally {
      setIsUploading(false);
    }
  };

  const triggerFileInput = () => {
    fileInputRef.current?.click();
  };

  return (
    <div className="flex flex-col gap-4">
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileChange}
        accept={accept}
        className="hidden"
      />

      {previewUrl && type === "image" && (
        <div className="relative w-full h-48 rounded-md overflow-hidden border">
          <Image
            src={previewUrl}
            alt="Preview"
            fill
            className="object-contain"
            onLoad={() => URL.revokeObjectURL(previewUrl)} // Clean up memory
          />
        </div>
      )}

      <Button
        type="button"
        variant={variant === "dark" ? "default" : "outline"}
        onClick={triggerFileInput}
        disabled={isUploading}
        className="w-full"
      >
        {isUploading ? 'Uploading...' : placeholder}
      </Button>

      {file && (
        <p className="text-sm text-muted-foreground truncate">
          Selected: {file.name}
        </p>
      )}
    </div>
  );
};

export default FileUpload;